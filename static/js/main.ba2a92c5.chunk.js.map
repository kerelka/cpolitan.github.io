{"version":3,"sources":["store/store.js","store/action/actionTypes.js","components/navbar.js","components/form.js","store/action/todoAction.js","components/listItem.js","components/lists.js","components/noteitem.js","components/notes.js","pages/about.js","pages/project.js","pages/contact.js","App.js","serviceWorker.js","index.js"],"names":["todoInitialState","todos","noteInitialState","notes","rootReducer","combineReducers","todoReducer","state","action","type","payload","deleteTodo","splice","editTodo","index","todo","console","log","noteReducer","editNote","indexNote","note","deleteNote","indexDelete","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Navbar","className","href","data-toggle","data-target","id","to","activeClassName","Form","props","onChange","e","setState","text","target","value","onSubmit","preventDefault","buttonDisabled","input","trim","addMode","addTodo","addNote","onChangeMode","mode","bind","styleButtonTodo","styleButtonNotes","this","onClick","disabled","React","Component","connect","dispatch","ListItem","editHandlerButton","viewMode","saveHandler","cancelHandler","deleteHandler","buttonEdit","buttonDelete","Lists","map","key","NoteItem","onChangeInput","onSave","onDelete","onChangeView","onCancel","item","style","maxWidth","About","marginTop","Project","Contact","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba2a92c5.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\r\nimport { Switch } from 'react-router-dom';\r\nimport * as actionTypes from './action/actionTypes'\r\n\r\n// state\r\nconst todoInitialState = {\r\n    todos: []\r\n}\r\n\r\nconst noteInitialState = {\r\n    notes: []\r\n}\r\n\r\nconst todoReducer = (state = todoInitialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.ADD_TODO: \r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n        case actionTypes.DELETE_TODO:\r\n            let deleteTodo = [...state.todos]\r\n            deleteTodo.splice(action.payload, 1)\r\n            return{\r\n                ...state,\r\n                todos: deleteTodo\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            let editTodo = [...state.todos]\r\n            let index = action.payload.index\r\n            let todo = action.payload.todo\r\n            editTodo[index] = todo\r\n            console.log(editTodo)\r\n            return {\r\n                ...state,\r\n                todos: editTodo\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst noteReducer = (state = noteInitialState, action) => {\r\n    switch(action.type){\r\n        case actionTypes.ADD_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes, action.payload]\r\n            }\r\n        case actionTypes.EDIT_NOTE:\r\n            let editNote = [...state.notes]\r\n            let indexNote = action.payload.index\r\n            editNote[indexNote] = action.payload.note\r\n\r\n            return{\r\n                ...state,\r\n                notes: editNote\r\n            }\r\n        case actionTypes.DELETE_NOTE:\r\n            let deleteNote = [...state.notes]\r\n            let indexDelete = action.payload\r\n            deleteNote.splice(indexDelete, 1)\r\n\r\n            return{\r\n                ...state,\r\n                notes: deleteNote\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n})\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;","export const ADD_TODO = 'ADD_TODO'\r\nexport const EDIT_TODO = 'EDIT_TODO'\r\nexport const DELETE_TODO = 'DELETE_TODO'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const EDIT_NOTE = 'EDIT_NOTE'\r\nexport const DELETE_NOTE = 'DELETE_NOTE'","import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Navbar = () =>{\r\n    return(\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-white shadow\">\r\n                <div className=\"container\">\r\n                    <a href=\"#\" className=\"navbar-brand\">KKA</a>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"navbar-toggler\"\r\n                        data-toggle=\"collapse\"\r\n                        data-target=\"#navbarCollapse\"\r\n                    ><span className=\"navbar-toggler-icon\"></span></button>\r\n\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarCollapse\">\r\n                        <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item\"><NavLink to=\"/\" className=\"nav-link\" activeClassName=\"active\">About</NavLink></li>\r\n                        <li className=\"nav-item\"><NavLink to=\"/project\" className=\"nav-link\" activeClassName=\"active\">Projects</NavLink></li>\r\n                        <li className=\"nav-item\"><NavLink to=\"/contact\" className=\"nav-link\" activeClassName=\"active\">Contact me</NavLink></li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { addTodo, addNote } from '../store/action/todoAction'\r\n\r\n\r\nclass Form extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            text : '',\r\n            buttonDisabled: false,\r\n            addMode: 'Todo'\r\n        }\r\n        \r\n        this.onSubmit = this.onSubmit.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.onChangeMode = this.onChangeMode.bind(this)\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            buttonDisabled: true\r\n        })\r\n        var input = this.state.text.trim();\r\n        if(input !== ''){\r\n            if(this.state.addMode === 'Todo'){\r\n                this.props.addTodo(input)\r\n            }else{\r\n                this.props.addNote(input);\r\n            }\r\n            this.setState({\r\n                text: ''\r\n            })\r\n        }\r\n        this.setState({\r\n            buttonDisabled: false\r\n        })\r\n        \r\n    }\r\n\r\n    onChangeMode = (mode) =>{\r\n        this.setState({ addMode : mode})\r\n    }\r\n    render(){\r\n        var styleButtonTodo = ''\r\n        var styleButtonNotes = ''\r\n        if(this.state.addMode === 'Todo'){\r\n            styleButtonTodo = 'btn-outline-secondary'\r\n        }else{\r\n            styleButtonNotes = 'btn-outline-secondary'\r\n        }\r\n        return(\r\n            <div className=\"col-md-6\">\r\n                <button \r\n                    className={`btn btn-outline-primary mr-2 ${styleButtonTodo}`}\r\n                    onClick={() => this.onChangeMode('Todo')}\r\n                >Switch to add Todo</button>\r\n                <button \r\n                    className={`btn btn-outline-primary ${styleButtonNotes}`}\r\n                    onClick={() => this.onChangeMode('Notes')}\r\n                >Switch to add Notes</button>\r\n                <form onSubmit={(e) => this.onSubmit(e)}>\r\n                    <div className=\"form-group mt-3\">\r\n                        <label className=\"display-4\">Add {this.state.addMode}</label>\r\n                        <input\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            onChange={(e) => this.onChange(e)}\r\n                            value={this.state.text}\r\n                        />\r\n                    </div>\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-outline-secondary\"\r\n                        disabled={this.state.buttonDisabled}\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispathToProps = dispatch =>{\r\n    return{\r\n        addTodo: (todo) => dispatch(addTodo(todo)),\r\n        addNote: (note) => dispatch(addNote(note))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispathToProps)(Form);","import * as actionTypes from './actionTypes'\r\n\r\n\r\n\r\nexport const addTodo = (todo) => ({type: actionTypes.ADD_TODO, payload : todo})\r\nexport const deleteTodo = (index) => ({type: actionTypes.DELETE_TODO, payload : index})\r\nexport const editTodo = (payload) => ({type: actionTypes.EDIT_TODO, payload: payload})\r\nexport const addNote = (note) => ({type: actionTypes.ADD_NOTE, payload: note})\r\nexport const editNote = (payload) => ({type: actionTypes.EDIT_NOTE, payload: payload})\r\nexport const deleteNote = (index) => ({type: actionTypes.DELETE_NOTE,payload: index})","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { editTodo, deleteTodo } from '../store/action/todoAction'\r\n\r\nclass ListItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            viewMode: 'show',\r\n            text: props.todo\r\n        }\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({text: e.target.value})\r\n    }\r\n\r\n    editHandlerButton = () =>{\r\n        this.setState({ viewMode : 'edit'})\r\n    }\r\n\r\n    saveHandler = () =>{\r\n        this.props.editTodo(this.state.text, this.props.index)\r\n        this.setState({\r\n            viewMode: 'show'\r\n        })\r\n\r\n    }\r\n\r\n    cancelHandler = () =>{\r\n        this.setState({\r\n            viewMode: 'show'\r\n        })\r\n    }\r\n\r\n    deleteHandler = () =>{\r\n        this.props.deleteTodo(this.props.index)\r\n    }\r\n\r\n    render(){\r\n        var todo = (<h3 className=\"d-inline\">{this.props.todo}</h3>)\r\n        var buttonEdit = (\r\n            <button\r\n                className=\"btn btn-outline-primary d-inline\"\r\n                type=\"button\"\r\n                onClick={this.editHandlerButton}\r\n            >Edit</button>\r\n        )\r\n\r\n        if(this.state.viewMode === 'edit'){\r\n            todo = (\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    onChange={(e) => this.onChange(e)}\r\n                    value={this.state.text}\r\n                />\r\n            )\r\n\r\n            buttonEdit = (\r\n                <>\r\n                    <button\r\n                        className=\"btn btn-outline-success d-inline\"\r\n                        type=\"button\"\r\n                        onClick={this.saveHandler}\r\n                    >Save</button>\r\n                    <button\r\n                        className=\"btn btn-outline-info d-inline\"\r\n                        type=\"button\"\r\n                        onClick={this.cancelHandler}\r\n                    >Cancel</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        if(this.state.viewMode !== 'edit')\r\n        {\r\n            var buttonDelete = (<button\r\n                className=\"btn btn-outline-danger d-inline\"\r\n                type=\"button\"\r\n                onClick={this.deleteHandler}\r\n            >Delete</button>)\r\n        }else{\r\n            var buttonDelete = null\r\n        }\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    {todo}\r\n                </div>\r\n                <div className=\"col\">\r\n                    {buttonEdit}\r\n                    {buttonDelete}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return {\r\n        editTodo: (todo, index) => dispatch(editTodo({todo, index})),\r\n        deleteTodo: (index) => dispatch(deleteTodo(index))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(ListItem);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport ListItem from './listItem'\r\n\r\nclass Lists extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"col-md-6\">\r\n                <h2>Lists</h2>\r\n                <ul className=\"list-group\">\r\n                    {\r\n                        this.props.todos.map((todo, index) => (\r\n                            <li className=\"list-group-item container\" key={index}>\r\n                                <ListItem\r\n                                    todo={todo}\r\n                                    index={index}\r\n                                />\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: state.todoReducer.todos\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Lists);","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { editNote, deleteNote } from '../store/action/todoAction'\r\n\r\nclass NoteItem extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            text: props.item,\r\n            viewMode: 'show'\r\n        }\r\n    }\r\n\r\n    onChangeInput = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    onSave = () => {\r\n        var input = this.state.text.trim()\r\n        if(input !== ''){\r\n            this.props.editNote(input, this.props.index)\r\n            this.setState({\r\n                viewMode: 'show'\r\n            })\r\n        }\r\n    }\r\n    onDelete = () => {\r\n        this.props.deleteNote(this.props.index);\r\n    }\r\n\r\n    onChangeView = () => {\r\n        this.setState({\r\n            viewMode: 'edit'\r\n        })\r\n    }\r\n\r\n    onCancel = () =>{\r\n        this.setState({\r\n            viewMode: 'show'\r\n        })\r\n    }\r\n\r\n    render(){\r\n        let note = (\r\n            <p className=\"lead\">\r\n                {this.props.item}\r\n            </p>\r\n        )\r\n        \r\n        let buttonEdit = (\r\n            <button \r\n                className=\"btn btn-outline-primary\"\r\n                onClick={this.onChangeView}\r\n            >Edit Note</button>\r\n        )\r\n\r\n        let buttonDelete = (\r\n            <button\r\n                className=\"btn btn-outline-danger ml-2\"\r\n                onClick={this.onDelete}\r\n            >Delete</button>\r\n        )\r\n\r\n        if(this.state.viewMode === 'edit'){\r\n            note = (\r\n                <input\r\n                    className=\"form-control mb-1\"\r\n                    value={this.state.text}\r\n                    onChange={(e) => this.onChangeInput(e)}\r\n                    type=\"text\"\r\n                />\r\n            )\r\n\r\n            buttonEdit = (\r\n                <>\r\n                    <button\r\n                        className=\"btn btn-outline-success m-2\"\r\n                        onClick={this.onSave}\r\n                    >Save</button>\r\n                    <button\r\n                        className=\"btn btn-outline-info m-2\"\r\n                        onClick={this.onCancel}\r\n                    >Cancel</button>\r\n                </>\r\n            )\r\n            \r\n            buttonDelete = null\r\n        }\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {note}\r\n                </div>\r\n                <div className=\"row\">\r\n                    {buttonEdit}\r\n                    {buttonDelete}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        editNote: (note, index) => dispatch(editNote({note, index})),\r\n        deleteNote: (index) => dispatch(deleteNote(index))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(NoteItem);","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport NoteItem from './noteitem'\r\n\r\nconst Notes = (props) =>{\r\n    return(\r\n        <div className=\"container mt-2 text-center\" style={{maxWidth: '550px'}}>\r\n            <h2>Notes</h2>\r\n            <ul className=\"list-group row\">\r\n                {\r\n                    \r\n                    props.notes.map((item, index) => (\r\n                        <li className=\"list-group-item container\" key={index}>\r\n                            <NoteItem\r\n                                item={item}\r\n                                index={index}\r\n                            />\r\n                        </li>\r\n                    ))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        notes : state.noteReducer.notes\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Notes);","import React from 'react'\r\nimport Form from '../components/form'\r\nimport Lists from '../components/lists'\r\nimport Notes from '../components/notes'\r\n\r\n\r\nconst About = () =>{\r\n    return(\r\n        <div className=\"container\"  style={{maxWidth: \"990px\", marginTop: \"4rem\"}}>\r\n            <div className=\"row\">\r\n                <Form />\r\n                <Lists />\r\n            </div>\r\n            <br />\r\n            <hr />\r\n            <div className=\"row\">\r\n                <Notes />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\r\n\r\nconst Project = () =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Welcome to project</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project;","import React from 'react'\r\n\r\nconst Contact = () => {\r\n    return(\r\n        <div className=\"container\">\r\n            <h2>Welcome to contact</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact;","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Route} from 'react-router-dom'\nimport store from './store/store'\nimport Navbar from './components/navbar'\nimport About from './pages/about'\nimport Project from './pages/project'\nimport Contact from './pages/contact'\n\nclass App extends React.Component{\n  render(){\n    return(\n      <Provider store={store}>\n        <div className=\"App\">\n          <Router>\n            <Navbar />\n            <Route path=\"/\" exact component={About} />\n            <Route path=\"/project\" component={Project} />\n            <Route path=\"/contact\" component={Contact} />\n          </Router>\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}